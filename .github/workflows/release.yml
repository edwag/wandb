name: Cut Release
run-name: cut sdk release triggered by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      bump-version-kind:
        type: choice
        required: true
        description: How to bump the current version
        default: devkind
        options:
          - "major"
          - "minor"
          - "patch"
          - "devkind"
          - "prekind"
          - "pre"

jobs:
  freeze:
    name: Freeze main branch
    runs-on: ubuntu-latest
    steps:
      - name: Freeze main branch
        run: |
          curl -d "frozen=true&user_name=${{ github.actor }}&note=prep for release" -X POST https://www.mergefreeze.com/api/branches/${{ github.repository }}/main/?access_token=${{ secrets.COLDBEAR_TOKEN }}

  test-nightly:
    name: Run nightly tests
    needs: freeze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout wandb/wandb
        uses: actions/checkout@v3
        with:
          repository: wandb/wandb
          path: wandb
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Run nightly tests
        run: |
          cd wandb
          pip install -e .
          CIRCLECI_TOKEN=${{ secrets.MUMBOJUMBO_TOKEN }} python tools/circleci-tool.py --dryrun trigger-nightly
          # CIRCLECI_TOKEN=${{ secrets.MUMBOJUMBO_TOKEN }} python tools/circleci-tool.py trigger-nightly --wait

  test-regression:
    name: Run regression tests
    needs: freeze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout wandb/wandb-testing
        uses: actions/checkout@v3
        with:
          repository: wandb/wandb-testing
          path: wandb-testing
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Run regression tests
        run: |
          cd wandb-testing
          pip install git+https://github.com/wandb/wandb@main#egg=wandb
          python --version
          
  make-release:
    name: Release
    environment: "release"
    needs:
      - test-nightly
      - test-regression
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.bump-version.outputs.release_version }}
      output2: ${{ steps.create-pr.outputs.pull-request-head-sha }}
    steps:
      - name: Checkout main for current release
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Bump version
        id: bump-version
        run: |
          python -m pip install --upgrade pip
          pip install bump2version
          
          new_version="$(bump2version ${{ github.event.inputs.bump-version-kind }} --list | grep new_version | cut -d'=' -f2)"

          echo "release_version=${new_version}" >> $GITHUB_OUTPUT
          echo "release_branch=release-${new_version}" >> $GITHUB_ENV
          echo "release_tag=v${new_version}" >> $GITHUB_ENV
      - name: Create release PR
        id: create-pr
        uses: peter-evans/create-pull-request@v4
        with:
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: ${{ env.release_branch }}
          delete-branch: true
          title: "chore(sdk): release ${{ steps.bump-version.outputs.release_version }} version"
          draft: true
          commit-message: "[create-pull-request] automated change of workflow ${{ github.run_id }} attempt ${{ github.run_number }}"
      - name: Create release notes
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: true
          name: ${{ env.release_tag }}
          generateReleaseNotes: true
          tag: ${{ env.release_tag }}
          prerelease: false
          updateOnlyUnreleased: true
          commit: ${{ env.release_branch }}
    
  build-and-publish:
      name: Build and Publish
      runs-on: ubuntu-latest
      needs: make-release
      steps:
      - name: Build
        run: |
          echo ${{ needs.make-release.outputs.output1 }}
      - name: Publish
        run: |
          # TODO use github actions to do the release
          # echo ${{ steps.create-pr.outputs.pull-request-operation }}
          echo ${{ needs.make-release.outputs.output2 }}

  unfreeze:
    name: Unfreeze main branch
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Unfreeze main branch
        run: |
          curl -d "frozen=false&user_name=${{ github.actor }}&note=prep for release" -X POST https://www.mergefreeze.com/api/branches/${{ github.repository }}/main/?access_token=${{ secrets.COLDBEAR_TOKEN }}
